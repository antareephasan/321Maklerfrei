{"version":3,"sources":["components/Typography/SectionTitle.js","components/RoundIcon.js","../node_modules/classnames/index.js","components/Paypal/paypal.js","components/Forms/SEPA_Checkout.js","components/Forms/BillingForm.js","pages/Error.js","components/Cards/PricingCard.js","components/Cards/BillingDetailsCard.js"],"names":["SectionTitle","children","className","RoundIcon","Icon","icon","iconColorClass","bgColorClass","cls","classNames","hasOwn","hasOwnProperty","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","call","join","module","exports","default","Paypal","props","useState","error","paypalRef","useRef","checkBoxRef","history","useHistory","t","useTranslation","openSnackbar","useContext","SnackbarContext","consent","setConsent","required","setRequired","plainId","paypalId","useEffect","window","paypal","Buttons","locale","style","size","color","shape","label","createSubscription","data","actions","subscription","create","plan_id","onInit","disable","current","addEventListener","event","target","checked","enable","onApprove","stripeService","createPaypalSubscription","type","uniqId","subscriptionID","then","setTimeout","replace","catch","console","log","onCancel","onerror","render","onFocus","e","preventDefault","ref","value","onChange","href","valid","IBAN_ELEMENT_OPTIONS","supportedCountries","placeholderCountry","base","fontSize","invalid","iconColor","IbanForm","setSepaPaymentId","handleSubmitSEPA","callback","userEmail","stripe","useStripe","user","AuthContext","elements","useElements","cardError","setCardError","handleSubmit","accountholder_name","email","address","iban","getElement","IbanElement","getSepaClientSecret","freshSepaClientSecret","confirmSepaDebitSetup","payment_method","sepa_debit","billing_details","name","result","message","flag","setupIntent","initialValues","validationSchema","Yup","onSubmit","setSubmitting","setStatus","Error","err","errors","touched","status","isSubmitting","as","Input","placeholder","disabled","Textarea","rows","res","options","block","BillingForm","formError","setFormError","option","setOption","sepaClientSecret","localStorage","getItem","pmMethod","updatePaymentMethod","line1","country","username","cardElement","CardElement","createPaymentMethod","card","paymentMethod","id","response","margin","variant","autoComplete","handleOption","fullwidth","PageError","to","PricingCard","title","active","enabled","PeopleIcon","onClick","BillingDetailsCard","listData","stripePaymentMethod","last4","EditIcon","layout"],"mappings":"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","file":"static/js/9.7c55c0ad.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction SectionTitle({ children }) {\r\n  return <h2 className=\"mb-4 text-lg font-semibold text-gray-600 dark:text-gray-300\">{children}</h2>\r\n}\r\n\r\nexport default SectionTitle\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\n\r\nfunction RoundIcon({\r\n  icon: Icon,\r\n  iconColorClass = 'text-purple-600 dark:text-purple-100',\r\n  bgColorClass = 'bg-purple-100 dark:bg-purple-600',\r\n  className,\r\n}) {\r\n  const baseStyle = 'p-3 rounded-full'\r\n\r\n  const cls = classNames(baseStyle, iconColorClass, bgColorClass, className)\r\n  return (\r\n    <div className={cls}>\r\n      <Icon className=\"w-5 h-5\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RoundIcon\r\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React, { useRef, useEffect, useState, useContext } from \"react\";\nimport { stripeService } from \"../../services\";\nimport { useHistory } from \"react-router-dom\";\nimport { SnackbarContext } from \"../../context/SnackbarContext\";\nimport { useTranslation } from \"react-i18next\";\nimport { Input, HelperText } from \"@windmill/react-ui\";\nexport default function Paypal(props) {\n  const [error, setError] = useState(false);\n  const paypalRef = useRef();\n  const checkBoxRef = useRef();\n  const history = useHistory();\n  const { t } = useTranslation();\n  const { openSnackbar } = useContext(SnackbarContext);\n  const [consent, setConsent] = useState(false);\n  const [required, setRequired] = useState(true);\n  const plainId = props.paypalId;\n  useEffect(() => {\n    window.paypal\n      .Buttons({\n        locale: \"de_DE\",\n        style: {\n          size: \"small\",\n          color: \"gold\",\n          shape: \"rect\",\n          label: \"checkout\",\n        },\n        createSubscription: function (data, actions) {\n          openSnackbar(t(\"Updating subscription...\"), \"neutral\");\n          return actions.subscription.create({\n            //Id of rent premium package of sandbox account for testing purpose//\n            // plan_id: \"P-1AV43823TR686664UMG466WQ\",\n            // plan_id: \"P-0RP141522N217154YMN3YXJQ\",\n            plan_id: plainId,\n          });\n        },\n        onInit: function (data, actions) {\n          // Disable the buttons\n          actions.disable();\n          checkBoxRef.current.addEventListener(\"change\", function (event) {\n            // Enable or disable the button when it is checked or unchecked\n            if (event.target.checked) {\n              actions.enable();\n              setRequired(false);\n            } else {\n              actions.disable();\n              setRequired(true);\n            }\n          });\n        },\n        onApprove: function (data, actions) {\n          stripeService\n            .createPaypalSubscription(\n              props.type,\n              props.uniqId,\n              data.subscriptionID\n            )\n            .then(() => {\n              openSnackbar(t(\"Payment Approved\"), \"success\", 3000);\n              setTimeout(() => {\n                history.push(\"/app\");\n                history.replace(\"/app/userLists\");\n              }, 1500);\n            })\n            .catch((error) => {\n              console.log(\"error in paypal\", error);\n            });\n        },\n        onCancel: function (data) {\n          // Show a cancel page, or return to cart\n          openSnackbar(t(\"Payment Canceled!\"), \"warning\", 3000);\n          // setCanceled(true);\n        },\n        onerror: function (data) {\n          // Show a cancel page, or return to cart\n          openSnackbar(t(\"Something went wrong!\"), \"danger\", 3000);\n          // setCanceled(true);\n        },\n      })\n      .render(paypalRef.current);\n  }, [error]);\n\n  return (\n    <div onFocus={(e) => e.preventDefault()}>\n      <div className=\"flex\">\n        <Input\n          ref={checkBoxRef}\n          required\n          value={consent}\n          onChange={() => setConsent(!consent)}\n          className=\"\"\n          type=\"checkbox\"\n        ></Input>\n        <span className=\"ml-2 text-xs leading-4\">\n          Hiermit bestätige ich, die{\" \"}\n          <a target=\"_blank\" href=\"/agb\">\n            Allgemeinen Geschäftsbedingungen\n          </a>{\" \"}\n          {\"/\"}{\" \"}\n          <a target=\"_blank\" href=\"/widerrufsbelehrung\">\n            Widerrufsbelehrung\n          </a>{\" \"}\n          gelesen zu haben und akzeptiere diese.\n        </span>\n      </div>\n      {required && (\n        <HelperText className=\"\" valid={false}>\n          {t(\"Required\")}\n        </HelperText>\n      )}\n      <div className=\"mt-4\" ref={paypalRef}></div>\n    </div>\n  );\n}\n","import React, { useState, useContext } from \"react\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Input, HelperText, Label, Textarea, Button } from \"@windmill/react-ui\";\nimport { useTranslation } from \"react-i18next\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport { stripeService } from \"./../../services/stripe.service\";\nimport { useStripe, useElements, IbanElement } from \"@stripe/react-stripe-js\";\nimport { SnackbarContext } from \"../../context/SnackbarContext\";\n\n// import \"./IbanFormStyles.css\";\n\n// Custom styling can be passed as options when creating an Element.\nconst IBAN_STYLE = {\n  base: {\n    color: \"#32325d\",\n    fontSize: \"16px\",\n    \"::placeholder\": {\n      color: \"#aab7c4\",\n    },\n    \":-webkit-autofill\": {\n      color: \"#32325d\",\n    },\n  },\n  invalid: {\n    color: \"#fa755a\",\n    iconColor: \"#fa755a\",\n    \":-webkit-autofill\": {\n      color: \"#fa755a\",\n    },\n  },\n};\n\nconst IBAN_ELEMENT_OPTIONS = {\n  supportedCountries: [\"SEPA\"],\n  // Elements can use a placeholder as an example IBAN that reflects\n  // the IBAN format of your customer's country. If you know your\n  // customer's country, we recommend that you pass it to the Element as the\n  // placeholderCountry.\n  placeholderCountry: \"DE\",\n  style: IBAN_STYLE,\n};\n\nexport default function IbanForm({\n  setSepaPaymentId,\n  handleSubmitSEPA,\n  callback,\n  userEmail,\n}) {\n  const stripe = useStripe();\n  const { user } = useContext(AuthContext);\n  const elements = useElements();\n  const [consent, setConsent] = useState(false);\n  const [required, setRequired] = useState(false);\n  const { openSnackbar } = useContext(SnackbarContext);\n  const [cardError, setCardError] = useState(null);\n  const { t } = useTranslation();\n  const handleSubmit = async (accountholder_name, email, address) => {\n    if (!consent) {\n      setRequired(true);\n      return;\n    }\n    setRequired(false);\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n    const iban = elements.getElement(IbanElement);\n    const freshSepaClientSecret = await stripeService.getSepaClientSecret(\n      email\n    );\n    const result = await stripe.confirmSepaDebitSetup(freshSepaClientSecret, {\n      payment_method: {\n        sepa_debit: iban,\n        billing_details: {\n          name: accountholder_name,\n          email: userEmail,\n        },\n      },\n    });\n    if (result.error) {\n      // Show error to your customer.\n      return { data: result.error.message, flag: false };\n    } else {\n      setSepaPaymentId(result.setupIntent.payment_method);\n      return {\n        data: await handleSubmitSEPA(\n          result.setupIntent.payment_method,\n          address\n        ),\n        flag: true,\n      };\n    }\n  };\n  return (\n    <div className=\"mb-4 py-3 bg-white rounded-lg dark:bg-gray-800\">\n      <Formik\n        initialValues={{\n          accountholder_name: user.name,\n          email: userEmail,\n          address: \"\",\n          // country: \"DE\",\n        }}\n        validationSchema={Yup.object().shape({\n          accountholder_name: Yup.string().required(\"Name is required\"),\n          email: Yup.string().required(\"email is required\"),\n          address: Yup.string().required(\"address is required\"),\n          // country: Yup.string().required(\"Country is required\"),\n        })}\n        onSubmit={(\n          { accountholder_name, email, address },\n          { setStatus, setSubmitting }\n        ) => {\n          setSubmitting(true);\n          handleSubmit(accountholder_name, email, address)\n            .then((data) => {\n              if (data.flag) {\n                setSubmitting(false);\n                callback(data.data);\n                return;\n              }\n              throw new Error();\n            })\n            .catch((err) => {\n              openSnackbar(t(\"Something Goes Wrong!\"), \"danger\", 3000);\n            });\n        }}\n      >\n        {({ errors, status, touched, isSubmitting }) => (\n          <Form>\n            <Label className=\"-mt-2\">\n              <span>{t(\"Your Name\")}:</span>\n              <Field\n                className=\"mt-1\"\n                as={Input}\n                name=\"accountholder_name\"\n                type=\"text\"\n                placeholder={t(\"Jenny Rosen\")}\n              />\n              {errors.accountholder_name && touched.accountholder_name ? (\n                <HelperText valid={false}>\n                  {errors.accountholder_name}\n                </HelperText>\n              ) : null}\n            </Label>\n\n            <Label className=\"mt-4\">\n              <span>{t(\"Email Address\")}:</span>\n              <Field\n                className=\"mt-1\"\n                as={Input}\n                // rows=\"3\"\n                disabled\n                name=\"email\"\n                placeholder={t(\"Enter Email Address\")}\n              />\n              {errors.email && touched.email ? (\n                <HelperText valid={false}>{errors.email}</HelperText>\n              ) : null}\n            </Label>\n\n            <Label className=\"mt-4\">\n              <span>{t(\"Billing Address\")}:</span>\n              <Field\n                className=\"mt-1\"\n                as={Textarea}\n                rows=\"3\"\n                name=\"address\"\n                placeholder={t(\"Enter Billing Address\")}\n              />\n              {errors.address && touched.address ? (\n                <HelperText valid={false}>{errors.address}</HelperText>\n              ) : null}\n            </Label>\n\n            <Label className=\"mt-4\">\n              <span>{t(\"IBAN Number\")}:</span>\n\n              <IbanElement\n                onChange={(res) => {\n                  setCardError(res.error);\n                }}\n                options={IBAN_ELEMENT_OPTIONS}\n                className=\"mt-1 p-3 bg-white block w-full dark:text-gray-300 rounded-md border border-gray-300 dark:border-gray-600 dark:bg-gray-700\"\n              />\n              {cardError ? (\n                <HelperText valid={false}>{cardError.message}</HelperText>\n              ) : null}\n            </Label>\n            {/* <HelperText valid={true}>\n              Use any IBAN test number, eg: AT611904300234573201\n            </HelperText> */}\n            <div className=\"flex\">\n              <Input\n                value={consent}\n                onChange={() => setConsent(!consent) & setRequired(false)}\n                className=\"mt-6\"\n                type=\"checkbox\"\n              ></Input>\n              <span className=\"ml-2 mt-6 text-xs leading-4\">\n                Hiermit bestätige ich, die{\" \"}\n                <a target=\"_blank\" href=\"/agb\">\n                  Allgemeinen Geschäftsbedingungen\n                </a>{\" \"}\n                {\"/\"}{\" \"}\n                <a target=\"_blank\" href=\"/widerrufsbelehrung\">\n                  Widerrufsbelehrung\n                </a>{\" \"}\n                gelesen zu haben und akzeptiere diese.\n              </span>\n            </div>\n            {required && (\n              <HelperText className=\"mt-2\" valid={false}>\n                {t(\"Required\")}\n              </HelperText>\n            )}\n\n            <Button\n              className=\"mt-6\"\n              block\n              type=\"submit\"\n              value=\"submit\"\n              disabled={!stripe || isSubmitting}\n            >\n              {t(\"Complete Payment\")}\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n}\n","import React, { useState, useContext } from \"react\";\r\nimport {\r\n  CardElement,\r\n  useStripe,\r\n  useElements,\r\n  IbanElement,\r\n} from \"@stripe/react-stripe-js\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport {\r\n  Input,\r\n  HelperText,\r\n  Label,\r\n  Textarea,\r\n  Button,\r\n  Select,\r\n} from \"@windmill/react-ui\";\r\nimport { stripeService } from \"../../services\";\r\nimport Paypal from \"../Paypal/paypal\";\r\n// import SEPA_Payment_Form from \"./SEPA_Payment_Form\";\r\nimport SEPA_Checkout from \"./SEPA_Checkout\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport { SnackbarContext } from \"../../context/SnackbarContext\";\r\n\r\n// const PayPalButton = paypal.Buttons.driver(\"react\", { React, ReactDOM });\r\n\r\nfunction BillingForm({ callback, uniqId, value, type, paypalId }) {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const [cardError, setCardError] = useState(null);\r\n  const [consent, setConsent] = useState(false);\r\n  const [required, setRequired] = useState(false);\r\n  const [formError, setFormError] = useState(null);\r\n  const [option, setOption] = useState(\"Paypal\");\r\n  const [sepaPaymentId, setSepaPaymentId] = useState();\r\n  const { user } = useContext(AuthContext);\r\n  const { openSnackbar } = useContext(SnackbarContext);\r\n  const { t } = useTranslation();\r\n  const sepaClientSecret = localStorage.getItem(\"sepaClientSecret\");\r\n\r\n  const createOrder = (data, actions) => {\r\n    return actions.order.create({\r\n      purchase_units: [\r\n        {\r\n          amount: {\r\n            value: \"0.01\",\r\n          },\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const handleOption = (e) => {\r\n    setOption(e.target.value);\r\n  };\r\n  const onApprove = (data, actions) => {\r\n    return actions.order.capture();\r\n  };\r\n\r\n  const handleSubmitSEPA = async (pmMethod, address) => {\r\n    return stripeService\r\n      .updatePaymentMethod(pmMethod, { line1: address, country: \"DE\" }, uniqId, true)\r\n      .then((user) => {\r\n        return user;\r\n      });\r\n  };\r\n\r\n  const handleSubmit = async (username, address, country) => {\r\n    if (!consent) {\r\n      setRequired(true);\r\n      return;\r\n    }\r\n    setRequired(false);\r\n    if (!stripe || !elements) {\r\n      return;\r\n    }\r\n\r\n    const cardElement = elements.getElement(CardElement);\r\n    if (option === \"SEPA-Lastschrift\") {\r\n      const iban = elements.getElement(IbanElement);\r\n\r\n      const result = await stripe.confirmSepaDebitSetup(sepaClientSecret, {\r\n        payment_method: {\r\n          sepa_debit: iban,\r\n        },\r\n      });\r\n\r\n      if (result.error) {\r\n        console.log(result.error.message);\r\n      } else {\r\n      }\r\n    }\r\n    return stripe\r\n      .createPaymentMethod({\r\n        type: \"card\",\r\n        card: cardElement,\r\n        billing_details: {\r\n          name: user.name,\r\n          address: {\r\n            line1: address,\r\n            country: country,\r\n          },\r\n        },\r\n      })\r\n      .then(({ error, paymentMethod }) => {\r\n        if (error) {\r\n          throw error;\r\n        } else {\r\n          return stripeService\r\n            .updatePaymentMethod(\r\n              paymentMethod.id,\r\n              { line1: address, country: country },\r\n              uniqId\r\n            )\r\n            .then((user) => {\r\n              return user;\r\n            });\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"mb-4 py-3 bg-white rounded-lg dark:bg-gray-800\">\r\n        <Formik\r\n          initialValues={{\r\n            username: user.name,\r\n            address: \"\",\r\n            country: \"DE\",\r\n          }}\r\n          validationSchema={Yup.object().shape({\r\n            username: Yup.string().required(\"Name is required\"),\r\n            address: Yup.string().required(\"Address is required\"),\r\n            country: Yup.string().required(\"Country is required\"),\r\n          })}\r\n          onSubmit={(\r\n            { username, address, country },\r\n            { setStatus, setSubmitting }\r\n          ) => {\r\n            setSubmitting(true);\r\n            setFormError(null);\r\n            setStatus();\r\n            handleSubmit(username, address, country)\r\n              .then((user) => {\r\n                if (!user) {\r\n                  openSnackbar(t(\"Payment Failed!\"), \"danger\", 3000);\r\n                  setSubmitting(false);\r\n                  return;\r\n                }\r\n                setSubmitting(false);\r\n                callback(user);\r\n              })\r\n              .catch((err) => {\r\n                setSubmitting(false);\r\n                openSnackbar(t(\"Payment Failed!\"), \"danger\", 3000);\r\n                if (err.response && err.response.data.message) {\r\n                  setFormError(err.response.data.message);\r\n                } else {\r\n                  setFormError(\"Some error occured!\");\r\n                }\r\n              });\r\n          }}\r\n        >\r\n          {({ errors, status, touched, isSubmitting }) => (\r\n            <Form>\r\n              <Label className=\"\">\r\n                <span>{t(\"Payment method\")}:</span>\r\n              </Label>\r\n              <Select\r\n                className=\"mb-4 mt-1\"\r\n                label=\"payment method\"\r\n                name=\"paymentmethod\"\r\n                margin=\"normal\"\r\n                variant=\"outlined\"\r\n                autoComplete=\"off\"\r\n                onChange={(e) => handleOption(e)}\r\n                fullwidth=\"true\"\r\n              >\r\n                <option>{t(\"Paypal\")}</option>\r\n                <option value=\"Credit Card\">{t(\"Credit Card\")}</option>\r\n                <option>{t(\"SEPA-Lastschrift\")}</option>\r\n                {/* <option>{t(\"Apple Pay\")}</option> */}\r\n              </Select>\r\n              {option === \"Credit Card\" ? (\r\n                <>\r\n                  <Label className=\"mt-4\">\r\n                    <span>{t(\"Your Name\")}:</span>\r\n                    <Field\r\n                      className=\"mt-1\"\r\n                      as={Input}\r\n                      name=\"username\"\r\n                      type=\"text\"\r\n                      placeholder={t(\"enter your name\")}\r\n                    />\r\n                    {errors.username && touched.username ? (\r\n                      <HelperText valid={false}>{errors.username}</HelperText>\r\n                    ) : null}\r\n                  </Label>\r\n\r\n                  <Label className=\"mt-4\">\r\n                    <span>{t(\"Billing Address\")}:</span>\r\n                    <Field\r\n                      className=\"mt-1\"\r\n                      as={Textarea}\r\n                      rows=\"3\"\r\n                      name=\"address\"\r\n                      placeholder={t(\"Enter Billing Address\")}\r\n                    />\r\n                    {errors.address && touched.address ? (\r\n                      <HelperText valid={false}>{errors.address}</HelperText>\r\n                    ) : null}\r\n                  </Label>\r\n\r\n                  <Label className=\"mt-4\">\r\n                    <span>{t(\"Card Details\")}:</span>\r\n                    <CardElement\r\n                      onChange={(res) => {\r\n                        setCardError(res.error);\r\n                      }}\r\n                      className=\"mt-1 p-3 bg-white block w-full dark:text-gray-300 rounded-md border border-gray-300 dark:border-gray-600 dark:bg-gray-700\"\r\n                    />\r\n                    {cardError ? (\r\n                      <HelperText valid={false}>{cardError.message}</HelperText>\r\n                    ) : null}\r\n                  </Label>\r\n                  <div className=\"flex\">\r\n                    <Input\r\n                      value={consent}\r\n                      onChange={() => setConsent(!consent) & setRequired(false)}\r\n                      className=\"mt-6\"\r\n                      type=\"checkbox\"\r\n                    ></Input>\r\n                    <span className=\"ml-2 mt-6 text-xs leading-4\">\r\n                      Hiermit bestätige ich, die{\" \"}\r\n                      <a target=\"_blank\" href=\"/agb\">\r\n                        Allgemeinen Geschäftsbedingungen\r\n                      </a>{\" \"} {\"/\"} {\" \"}\r\n                      <a target=\"_blank\" href=\"/widerrufsbelehrung\">\r\n                        Widerrufsbelehrung\r\n                      </a>{\" \"}\r\n                      gelesen zu haben und akzeptiere diese.\r\n                    </span>\r\n                  </div>\r\n                  {required && (\r\n                    <HelperText className=\"mt-2\" valid={false}>\r\n                      {t(\"Required\")}\r\n                    </HelperText>\r\n                  )}\r\n                  {/* {<HelperText valid={true}>\r\n                    Use any stripe test card, eg: 4242 4242 4242 4242\r\n                  </HelperText>} */}\r\n\r\n                  <Button\r\n                    className=\"mt-6\"\r\n                    block\r\n                    type=\"submit\"\r\n                    value=\"submit\"\r\n                    disabled={!stripe || isSubmitting}\r\n                  >\r\n                    {t(\"Complete Payment\")}\r\n                  </Button>\r\n                </>\r\n              ) : option === \"Paypal\" ? (\r\n                <Paypal\r\n                  value={value}\r\n                  uniqId={uniqId}\r\n                  type={type}\r\n                  paypalId={paypalId}\r\n                />\r\n              ) :  option === \"SEPA-Lastschrift\" ? (\r\n                // eslint-disable-next-line react/jsx-pascal-case\r\n                <SEPA_Checkout\r\n                  setSepaPaymentId={setSepaPaymentId}\r\n                  handleSubmitSEPA={handleSubmitSEPA}\r\n                  callback={callback}\r\n                  userEmail={user.email}\r\n                />\r\n              ) : null\r\n              }\r\n              {status && (\r\n                <HelperText valid={false}>{status.message}</HelperText>\r\n              )}\r\n              {formError && <HelperText valid={false}>{formError}</HelperText>}\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default BillingForm;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { ForbiddenIcon } from '../icons'\r\n\r\nfunction PageError({message}) {\r\n  return (\r\n    <div className=\"flex flex-col items-center\">\r\n      <ForbiddenIcon className=\"w-12 h-12 mt-8 text-purple-200\" aria-hidden=\"true\" />\r\n      <h1 className=\"text-6xl font-semibold text-gray-700 dark:text-gray-200\">Error</h1>\r\n      <p className=\"text-gray-700 dark:text-gray-300\">\r\n        {message && message}{' '}\r\n        <Link className=\"text-purple-600 hover:underline dark:text-purple-300\" to=\"/app\">\r\n          Go back\r\n        </Link>\r\n        .\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PageError\r\n","import React from 'react'\r\nimport { Card, CardBody, Button } from '@windmill/react-ui'\r\nimport { PeopleIcon } from '../../icons'\r\nimport RoundIcon from '../RoundIcon'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nfunction PricingCard({ title, uniqId, type, value, active, enabled, callback }) {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <Card>\r\n      <CardBody className=\"flex flex-col space-y-2\">\r\n        <div className=\"flex items-center\">\r\n          <RoundIcon\r\n            icon={PeopleIcon}\r\n            iconColorClass=\"text-orange-500 dark:text-orange-100\"\r\n            bgColorClass=\"bg-orange-100 dark:bg-orange-500\"\r\n            className=\"mr-4\"\r\n          />\r\n          <div>\r\n            <p className=\"text-lg font-semibold text-gray-700 dark:text-gray-200\">{title}</p>\r\n            <p className=\"mb-2 text-sm font-medium text-gray-600 dark:text-gray-400\">{value}</p>          \r\n          </div>\r\n        </div>\r\n        <Button block disabled={active || !enabled} onClick={(e) => {e.preventDefault(); callback(type,uniqId);}}>\r\n          {active && <span>{t(\"Active plan\")}</span>}\r\n          {!active && <span>{t(\"Choose\")}</span>}\r\n        </Button>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default PricingCard\r\n","import React from \"react\";\r\nimport { Card, CardBody, Button } from \"@windmill/react-ui\";\r\nimport { EditIcon } from \"../../icons\";\r\n\r\nfunction BillingDetailsCard({ listData, callback }) {\r\n  return (\r\n    <Card className=\"mb-8\">\r\n      <CardBody className=\"flex items-center justify-between\">\r\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n          XXXX-XXXX-XXXX-{listData.stripePaymentMethod.last4}\r\n        </p>\r\n        <div>\r\n          <Button\r\n            icon={EditIcon}\r\n            layout=\"link\"\r\n            aria-label=\"Edit\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              callback();\r\n            }}\r\n          />\r\n        </div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default BillingDetailsCard;\r\n"],"sourceRoot":""}