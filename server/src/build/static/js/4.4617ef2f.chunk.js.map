{"version":3,"sources":["services/user.service.js","services/userList.service.js","components/Typography/PageTitle.js","services/flowfact.service.js","services/stripe.service.js"],"names":["apiUrl","config","api","url","userService","getUsers","page","axios","get","users","resultsPerPage","then","response","data","createUser","username","email","password","role","post","name","updateUserPassword","userId","patch","updateUserDetails","lastname","deleteUser","delete","deleteUserList","uniqId","buildFormData","formData","parentKey","Date","File","value","append","Object","keys","forEach","key","updateUserListDetails","sendData","FormData","userListService","PageTitle","children","className","generateCognitoToken","requestCognitoToken","cognitoToken","Error","message","assignMediaItems","entityId","schema_name","albumName","categories","sorting","multimediaItemIds","put","headers","contactId","newData","parking","values","typeOfParkingSpace","rooms","numberOfRooms","addresses","city","state","street","address","country","zipcode","zip","district","textEnvironment","features","numberbathrooms","numberOfBathrooms","no_of_floors","numberOfFloors","contact","numberbedrooms","numberOfBedrooms","identifier","textEstate","description","textFree","additionalDescription","carportnum","numberOfParkingSpaces","priority","estatetype","buildingType","specificBuildingType","numgarages","numberOfGarages","development","stateOfDevelopment","status","usablearea","usableArea","textLocation","location","oldnewbuilding","newBuilding","department","headline","listingTitle","livingarea","livingArea","monument","monumentProtection","purchaseprice","String","listingPrice","replaceAll","rent","rentPrice","buildingphase","plotarea","plotArea","typeofheating","typeOfHeating","heatingcosts","heatingCostinDetails","yearofconstruction","yearOfBuilding","service_charge","monthlyHousepayment","carportpurchaseprice","parkingSpacePrice","additionalexpenses","additionalCost","securitydeposit","secuirityCost","heating_costs_in_ac","commission","assign","commissionProspect","leasablearea","totalarea","energy","energy_certificate_availability","pass_valid_till","energyPassCreationDate","split","map","n","length","join","energyefficienceclass","energyEfficiencyClass","energyidentificationtype","typeOfEnergyPass","energyusagevalue","energyPass","fuelenergy_type","energySource","JSON","stringify","publishImagesToFlowFact","imgMultiStepForm","planMultiStepForm","openSnackbar","t","setLoadingTitle","setCurrentImgIdx","setCurrentImgForm","setProgressValue","console","log","formEmail","shops_commerce","catering_accommodation","production_halls","office_surgery","firstName","nameHide","contactName","lastName","emails","company","homepage","phone","phoneNumber","phones","type","number","formatPhoneNumberIntl","createFlowfactContact","Accept","getFormData","listingType","includes","window","localStorage","getItem","createEntitie","setItem","selectedType","entries","i","pic","title","formValuesType","imgDetails","formdata","resizedImage","e","id","showTypeId","onUploadProgress","progressEvent","loaded","total","percent","Math","floor","img","showType","multimediaItem","fileReference","setShowTypeId","st","parseEmail","flowFactId","publishToFlowFact","updateFlowFactListDetails","uploadImages","flowfactContactId","updateEntitie","updateFlowFactContact","updatesData","flowFactService","createPaymentIntent","catch","err","sendEmailToDom","stripeService","updatePaymentMethod","paymentMethodId","sepa","error","createSubscription","subscriptionType","stripeId","subscription","completeSubscription","subscriptionId","productId","user","pauseSubscription","deleteSubscription","unpauseSubscription","createPaypalSubscription","subscriptionID","cancelAutoRenew","getSepaClientSecret","freshSepaClientSecret"],"mappings":"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","file":"static/js/4.4617ef2f.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { config } from '../assets/config/config'\r\n\r\nconst apiUrl = config.api.url\r\n\r\nconst getUsers = (page) => {\r\n\treturn axios.get(`${apiUrl}/v1/users?limit=${config.users.resultsPerPage}&page=${page}`, {})\r\n\t\t.then(response => {\r\n\t    return response.data\r\n\t  })\r\n}\r\n\r\nconst createUser = (username, email, password, role) => {\r\n\treturn axios.post(`${apiUrl}/v1/users`, {\r\n    name: username,\r\n    email: email,\r\n    password: password,\r\n    role: role\r\n  })\r\n}\r\n\r\nconst updateUserPassword = (userId, password) => {\r\n\treturn axios.patch(`${apiUrl}/v1/users/${userId}`, {\r\n    password: password\r\n  })\r\n}\r\n\r\nconst updateUserDetails = (userId, username, email, lastname) => {\r\n\treturn axios.patch(`${apiUrl}/v1/users/${userId}`, {\r\n    name: username,\r\n    email: email,\r\n    lastname\r\n  })\r\n}\r\n\r\n\r\nconst deleteUser = (userId) => {\r\n\treturn axios.delete(`${apiUrl}/v1/users/${userId}`, {})\r\n}\r\nconst deleteUserList = (uniqId) => {\r\n\treturn axios.delete(`${apiUrl}/v1/userList/deleteList/${uniqId}`, {})\r\n}\r\n\r\nexport const userService = {\r\n  getUsers,\r\n  createUser,\r\n  updateUserPassword,\r\n  updateUserDetails,\r\n  deleteUser,\r\n  deleteUserList,\r\n}","import axios from 'axios'\r\nimport { config } from '../assets/config/config'\r\n\r\nconst apiUrl = config.api.url\r\nfunction buildFormData(formData, data, parentKey) {\r\n  if (data && typeof data === 'object' && !(data instanceof Date) && !(data instanceof File)) {\r\n    Object.keys(data).forEach(key => {\r\n      buildFormData(formData, data[key], parentKey ? `${parentKey}[${key}]` : key);\r\n    });\r\n  } else {\r\n    const value = data == null ? '' : data;\r\n    formData.append(parentKey, value);\r\n  }\r\n}\r\nconst updateUserListDetails = async(uniqId, formData) => {\r\n  const sendData = new FormData()\r\n  await buildFormData(sendData, formData);\r\n\treturn axios.patch(`${apiUrl}/v1/userList/update/${uniqId}`, sendData)\r\n}\r\n\r\nconst deleteUserList = (uniqId) => {\r\n\treturn axios.delete(`${apiUrl}/v1/userList/deleteList/${uniqId}`, {})\r\n}\r\nexport const userListService = {\r\n    updateUserListDetails,\r\n    deleteUserList,\r\n}","import React from 'react'\r\n\r\nfunction PageTitle({ children }) {\r\n  return (\r\n    <h1 className=\"my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200\">{children}</h1>\r\n  )\r\n}\r\n\r\nexport default PageTitle\r\n","import axios from 'axios';\nimport piexif from 'piexifjs';\nimport imageToBlob from 'image-to-blob';\nimport { config } from './../assets/config/config';\nimport { formatPhoneNumberIntl } from 'react-phone-number-input';\nimport { WindmillContext } from '@windmill/react-ui';\nconst apiUrl = config.api.url;\n// const UserList = require('../models/userList.model');\nconst generateCognitoToken = async () => {\n  try {\n    let requestCognitoToken = await axios.get(`${apiUrl}/v1/userList/t-d-t`);\n    return requestCognitoToken.data.cognitoToken;\n  } catch (er) {\n    throw new Error(404, er.message);\n  }\n};\nfunction appendBlob(resolve, file) {\n  return function (err, blob) {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    resolve(new File([blob], file.name, { type: file.type }));\n  };\n}\nfunction fixImage(file) {\n  try {\n    return new Promise((resolve, reject) => {\n      var reader = new FileReader();\n      reader.onload = function (e) {\n        var image = new Image();\n        image.src = e.target.result;\n        image.width = 1920;\n        image.height = 1080;\n        let result = e.target.result;\n        result = result.replace('jpeg', 'jpg');\n        result = result.replace('png', 'jpg');\n        var exifObj = piexif.load(result);\n        exifObj['0th'][piexif.ImageIFD.Orientation] = 1;\n        var inserted = piexif.insert(piexif.dump(exifObj), e.target.result);\n        var image2 = new Image();\n        image2.src = inserted;\n        image2.width = e.target.width;\n        image2.height = e.target.height;\n        imageToBlob(image2, appendBlob(resolve, file));\n      };\n      reader.readAsDataURL(file);\n    });\n  } catch (er) {\n    console.log(er);\n  }\n}\n// const resizeFile = (file) => {\n//     return new Promise((resolve, reject) => { // Create a new FileReader\n//         const reader = new FileReader();\n\n//         // When the FileReader is ready\n//         reader.onload = (e) => { // Create a new image instance\n//             const img = new Image();\n//             img.src = e.target.result;\n//             img.name = e.target.name;\n//             img.size = e.target.size;\n\n//             // When the image is ready\n//             img.onload = (el) => { // Create a new canvas\n//                 const canvas = document.createElement(\"canvas\");\n//                 const ctx = canvas.getContext(\"2d\");\n//                 const imageWidth = el.target.width;\n//                 const imageHeight = el.target.height;\n\n//                 if (imageWidth > imageHeight) {\n//                     canvas.width = imageWidth;\n//                     canvas.height = imageHeight;\n//                 } else {\n//                     canvas.width = imageWidth * 2;\n//                     canvas.height = imageHeight;\n//                 } ctx.fillStyle = \"#000\";\n//                 ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n//                 // Draw the image to the canvas with the new sizes\n//                 ctx.drawImage(el.target, imageWidth > imageHeight ? 0 : imageWidth / 2, 0, imageWidth, imageHeight);\n\n//                 // Build and return the resized image as an image file\n//                 canvas.toBlob((blob) => {\n//                     resolve(new File([blob], file.name, {type: file.type}));\n//                 });\n//             };\n//         };\n\n//         // Begin to load the file to the FileReader\n//         reader.readAsDataURL(file);\n//     });\n// };\n\nconst assignMediaItems = async (\n  cognitoToken,\n  entityId,\n  schema_name,\n  albumName,\n  categories,\n  sorting,\n  multimediaItemIds\n) => {\n  try {\n    await axios.put(\n      `https://api.production.cloudios.flowfact-prod.cloud/multimedia-service/assigned/schemas/${schema_name}/entities/${entityId}/items`,\n      {\n        albumName,\n        multimediaItemIds,\n        categories,\n        // sorting\n      },\n      {\n        headers: {\n          cognitoToken,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (er) {\n    throw new Error(404, er.message);\n  }\n};\n\nconst formData = (data, contactId) => {\n  let newData = {\n    parking: {\n      values: [data.typeOfParkingSpace],\n    }, // Number of Parking Spaces:\n    rooms: {\n      values: [data.numberOfRooms],\n    }, // Number of Rooms:\n    addresses: {\n      values: [\n        {\n          city: data.city,\n          state: null,\n          street: data.address,\n          country: null,\n          zipcode: data.zip,\n          district: null,\n        },\n      ],\n    },\n    textEnvironment: {\n      values: [data.features],\n    }, // Features:\n    numberbathrooms: {\n      values: [data.numberOfBathrooms],\n    }, // Number of Bathrooms:\n    no_of_floors: {\n      values: [data.numberOfFloors],\n    }, // Number of Floors:\n    contact: {\n      values: [contactId],\n    }, // Contact\n    numberbedrooms: {\n      values: [data.numberOfBedrooms],\n    }, // Number of Bedrooms:\n    identifier: {\n      values: [data.uniqId],\n    }, // Listing ID\n    textEstate: {\n      values: [data.description],\n    },\n    textFree: {\n      values: [data.additionalDescription],\n    },\n    carportnum: {\n      values: [data.numberOfParkingSpaces],\n    },\n    priority: {\n      values: [0],\n    },\n    estatetype: {\n      values: [data.buildingType === 'Land' ? '03' : data.specificBuildingType],\n    },\n    numgarages: {\n      values: [data.numberOfGarages],\n    },\n    development: {\n      values: [data.stateOfDevelopment],\n    },\n    // commissioninclvat: {\n    //     values: [true]\n    // },\n    status: {\n      values: ['active'],\n    },\n    usablearea: {\n      values: [data.usableArea],\n    },\n    textLocation: {\n      values: [data.location],\n    },\n    oldnewbuilding: {\n      values: [`${data.newBuilding ? '1' : ''}`],\n    }, // Special Features: New Building\n    department: {\n      values: ['0'],\n    },\n    headline: {\n      values: [data.listingTitle],\n    }, // Listing Title:\n    livingarea: {\n      values: [data.livingArea],\n    }, // Living Area:\n    monument: {\n      values: [data.monumentProtection ? 'true' : ''],\n    },\n    purchaseprice: {\n      values: [String(data.listingPrice).replaceAll('.', '')],\n    }, // Listing Price:\n    rent: {\n      values: [String(data.rentPrice).replaceAll('.', '')],\n    },\n    buildingphase: {\n      values: [data.buildingphase],\n    }, // energy pass:\n    plotarea: {\n      values: [data.plotArea],\n    }, // Plot Area:\n    typeofheating: {\n      values: [data.typeOfHeating],\n    }, // Type of heating\n    heatingcosts: {\n      values: [data.heatingCostinDetails],\n    },\n    yearofconstruction: {\n      values: [data.yearOfBuilding],\n    }, // Year of construction:\n    service_charge: {\n      values: [data.monthlyHousepayment],\n    },\n    carportpurchaseprice: {\n      values: [data.parkingSpacePrice],\n    },\n    additionalexpenses: {\n      values: [data.additionalCost],\n    },\n    securitydeposit: {\n      values: [data.secuirityCost],\n    },\n    heating_costs_in_ac: {\n      values: [false],\n    },\n  };\n  if (data.commission) {\n    Object.assign(newData, {\n      commissionProspect: {\n        values: [data.commission],\n      },\n    });\n  }\n  // else {\n  //     Object.assign(newData, {\n  //         commissionProspect: {\n  //             values: [\"0%\"]\n  //         }\n  //     });\n  // }\n  if (data.buildingType === 'Investment') {\n    Object.assign(newData, {\n      leasablearea: {\n        values: [data.leasablearea],\n      },\n      estatetype: {\n        values: [data.estatetype],\n      },\n    });\n  }\n  if (data.buildingType === 'Commercial') {\n    Object.assign(newData, {\n      estatetype: {\n        values: [data.estatetype],\n      },\n      totalarea: {\n        values: [data.totalarea],\n      },\n    });\n  }\n  if (data.energy) {\n    Object.assign(newData, {\n      energy_certificate_availability: {\n        values: ['A'],\n      },\n      // energidentificationdate: {\n      //     values: [data.energyPassCreationDate]\n      // },\n      pass_valid_till: {\n        values: [\n          data.energyPassCreationDate\n            .split('.')\n            .map((n) => (String(n).length > 3 ? +n + 10 : n))\n            .join('.'),\n        ],\n      },\n      energyefficienceclass: {\n        values: [data.energyEfficiencyClass],\n      },\n      energyidentificationtype: {\n        values: [data.typeOfEnergyPass],\n      },\n      energyusagevalue: {\n        values: [\n          data.energyPass === ''\n            ? ''\n            : +String(data.energyPass).replaceAll(',', '.'),\n        ],\n      }, // energy pass:\n      fuelenergy_type: {\n        values: [data.energySource],\n      }, // Energy Source:\n    });\n  } else {\n    Object.assign(newData, {\n      energy_certificate_availability: {\n        values: ['E'],\n      },\n      textFree: {\n        values: [\n          `${data.additionalDescription} Energieausweis liegt zur Besichtigung vor.`,\n        ],\n      },\n    });\n  }\n  return JSON.stringify(newData);\n};\n\nconst publishImagesToFlowFact = async (\n  data,\n  imgMultiStepForm,\n  planMultiStepForm,\n  openSnackbar,\n  t,\n  setLoadingTitle,\n  setCurrentImgIdx,\n  setCurrentImgForm,\n  setProgressValue\n) => {\n  // cognitoToken\n  try {\n    console.log('data', data);\n    const cognitoToken = await generateCognitoToken();\n    // test if we have contact\n    let contact = await axios.get(\n      `https://api.production.cloudios.flowfact-prod.cloud/contact-service/contact?email=${data.formEmail}`,\n      {\n        headers: {\n          cognitoToken,\n        },\n      }\n    );\n    let shops_commerce = [\n      '05A',\n      '05E1',\n      '05',\n      '05E2',\n      '05K',\n      '05L',\n      '05E',\n      '05LV',\n      '05F',\n    ];\n    let catering_accommodation = [\n      '08B',\n      '08C',\n      '08D',\n      '08F',\n      '08GAHS',\n      '08GAE',\n      '08HOT',\n      '08PENS',\n      '08REST',\n    ];\n    let production_halls = ['07H', '07LKÜ', '07L', '07LH', '07HI', '07W'];\n    let office_surgery = [\n      '06A',\n      '06BUGE',\n      '06BE',\n      '06B',\n      '06',\n      '06G',\n      '06P',\n      '06WOGE',\n    ];\n\n    if (contact.data === '') {\n      const newData = {\n        firstName: data.nameHide ? 'Privater' : data.contactName,\n        lastName: data.nameHide ? 'Anbieter' : data.lastName,\n        emails: [data.formEmail],\n        company: '321maklerfrei',\n        homepage: ['https://321maklerfrei.de'],\n      };\n      let phone = data.phoneNumber || data.phone;\n      if (phone?.length > 5) {\n        Object.assign(newData, {\n          phones: [\n            {\n              type: 'office',\n              number: formatPhoneNumberIntl(phone),\n            },\n          ],\n        });\n      } else {\n        Object.assign(newData, { phones: null });\n      }\n      const createFlowfactContact = JSON.stringify(newData);\n      // lets create the contact\n      let contactId = await axios.post(\n        `https://api.production.cloudios.flowfact-prod.cloud/contact-service/contact`,\n        createFlowfactContact,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n            cognitoToken,\n          },\n        }\n      );\n      contactId = contactId.data;\n      const getFormData = formData(data, contactId);\n      // lets test the schemanale\n      let schema_name;\n      if (data.listingType === 'For Rent') {\n        if (data.buildingType === 'Flat') {\n          schema_name = 'flat_rent';\n        }\n        if (data.buildingType === 'House') {\n          schema_name = 'house_rent';\n        }\n        if (data.buildingType === 'Investment') {\n          schema_name = 'investment';\n        }\n        if (data.buildingType === 'Land') {\n          schema_name = 'land_lease';\n        }\n        if (data.buildingType === 'Commercial') {\n          if (shops_commerce.includes(data.estatetype)) {\n            schema_name = 'shops_commerce_rent';\n          } else if (catering_accommodation.includes(data.estatetype)) {\n            schema_name = 'catering_accommodation_rent';\n          } else if (production_halls.includes(data.estatetype)) {\n            schema_name = 'production_halls_rent';\n          } else if (office_surgery.includes(data.estatetype)) {\n            schema_name = 'office_surgery_rent';\n          }\n        }\n      }\n      if (data.listingType === 'For Sale') {\n        if (data.buildingType === 'Flat') {\n          schema_name = 'flat_purchase';\n        }\n        if (data.buildingType === 'House') {\n          schema_name = 'house_purchase';\n        }\n        if (data.buildingType === 'Investment') {\n          schema_name = 'investment';\n        }\n        if (data.buildingType === 'Land') {\n          schema_name = 'land_purchase';\n        }\n        if (data.buildingType === 'Commercial') {\n          if (shops_commerce.includes(data.estatetype)) {\n            schema_name = 'shops_commerce_purchase';\n          } else if (catering_accommodation.includes(data.estatetype)) {\n            schema_name = 'catering_accommodation_purchase';\n          } else if (production_halls.includes(data.estatetype)) {\n            schema_name = 'production_halls_purchase';\n          } else if (office_surgery.includes(data.estatetype)) {\n            schema_name = 'office_surgery_purchase';\n          }\n        }\n      }\n      let entityId = window.localStorage.getItem('entityId');\n      if (!entityId) {\n        const createEntitie = await axios.post(\n          `https://api.production.cloudios.flowfact-prod.cloud/entity-service/latest/schemas/${schema_name}`,\n          getFormData,\n          {\n            headers: {\n              'Content-Type': 'application/json',\n              cognitoToken,\n            },\n          }\n        );\n        entityId = createEntitie.data;\n        window.localStorage.setItem('entityId', entityId);\n      }\n      for (let [i, pic] of imgMultiStepForm.selectedType.entries()) {\n        setProgressValue(0);\n        console.log('i', i);\n        setCurrentImgForm('imgMultiStepForm');\n        setCurrentImgIdx(i);\n        // openSnackbar(\n        //   `Bild ${i + 1} von ${\n        //     imgMultiStepForm.selectedType.length\n        //   } hochgeladen`,\n        //   'success'\n        // );\n        let title = imgMultiStepForm.formValuesType[i].imgDetails;\n        let formdata = new FormData();\n\n        let resizedImage;\n        try {\n          // resizedImage = await fixImage(pic);\n          resizedImage = pic;\n        } catch (e) {\n          resizedImage = pic;\n        }\n\n        formdata.append('file', resizedImage);\n        let id;\n        try {\n          if (!imgMultiStepForm.showTypeId[i]) {\n            let img = await axios.post(\n              `https://api.production.cloudios.flowfact-prod.cloud/multimedia-service/items/schemas/${schema_name}/entities/${entityId}?title=${title}`,\n              formdata,\n              {\n                headers: {\n                  cognitoToken,\n                  'Content-Type': 'multipart/form-data',\n                },\n                onUploadProgress: (progressEvent) => {\n                  const { loaded, total } = progressEvent;\n                  let percent = Math.floor((loaded * 100) / total);\n                  console.log(`${loaded}kb of ${total}kb | ${percent}%`);\n\n                  if (true) {\n                    setProgressValue(percent);\n                    // this.setState({ uploadPercentage: percent })\n                  }\n                },\n              }\n            );\n\n            imgMultiStepForm.showType[i] =\n              img.data.multimediaItem.fileReference;\n            id = img.data.multimediaItem.id;\n            imgMultiStepForm.setShowTypeId((st) => [...st, id]);\n          } else {\n            id = imgMultiStepForm.showTypeId[i];\n          }\n        } catch (err) {\n          setProgressValue(100);\n          id = imgMultiStepForm.showTypeId[i];\n        }\n        if (i === 0) {\n          await assignMediaItems(\n            cognitoToken,\n            entityId,\n            schema_name,\n            'homepage',\n            ['main_image'],\n            i,\n            [id]\n          );\n          await assignMediaItems(\n            cognitoToken,\n            entityId,\n            schema_name,\n            'portal',\n            ['main_image'],\n            i,\n            [id]\n          );\n        } else {\n          await assignMediaItems(\n            cognitoToken,\n            entityId,\n            schema_name,\n            'homepage',\n            ['pictures'],\n            i,\n            [id]\n          );\n          await assignMediaItems(\n            cognitoToken,\n            entityId,\n            schema_name,\n            'portal',\n            ['pictures'],\n            i,\n            [id]\n          );\n        }\n      }\n      for (let [i, pic] of planMultiStepForm.selectedType.entries()) {\n        setProgressValue(0);\n\n        setCurrentImgForm('planMultiStepForm');\n\n        setCurrentImgIdx(i);\n\n        // openSnackbar(\n        //   `Grundriss ${i + 1} von ${\n        //     planMultiStepForm.selectedType.length\n        //   } hochgeladen`,\n        //   'success'\n        // );\n        let title = planMultiStepForm.formValuesType[i].imgDetails;\n        let formdata = new FormData();\n        let resizedImage;\n        try {\n          // resizedImage = await fixImage(pic);\n          resizedImage = pic;\n        } catch (e) {\n          resizedImage = pic;\n        }\n\n        formdata.append('file', resizedImage);\n        let id;\n        try {\n          if (!planMultiStepForm.showTypeId[i]) {\n            let img = await axios.post(\n              `https://api.production.cloudios.flowfact-prod.cloud/multimedia-service/items/schemas/${schema_name}/entities/${entityId}?title=${title}`,\n              formdata,\n              {\n                headers: {\n                  cognitoToken,\n                  'Content-Type': 'multipart/form-data',\n                },\n                onUploadProgress: (progressEvent) => {\n                  const { loaded, total } = progressEvent;\n                  let percent = Math.floor((loaded * 100) / total);\n                  console.log(`${loaded}kb of ${total}kb | ${percent}%`);\n\n                  if (true) {\n                    setProgressValue(percent);\n                    // this.setState({ uploadPercentage: percent })\n                  }\n                },\n              }\n            );\n\n            planMultiStepForm.showType[i] =\n              img.data.multimediaItem.fileReference;\n\n            id = img.data.multimediaItem.id;\n            planMultiStepForm.setShowTypeId((st) => [...st, id]);\n          } else {\n            id = imgMultiStepForm.showTypeId[i];\n          }\n        } catch (err) {\n          id = planMultiStepForm.showTypeId[i];\n\n          setProgressValue(100);\n        }\n\n        await assignMediaItems(\n          cognitoToken,\n          entityId,\n          schema_name,\n          'homepage',\n          ['floorplans'],\n          i,\n          [id]\n        );\n        await assignMediaItems(\n          cognitoToken,\n          entityId,\n          schema_name,\n          'portal',\n          ['floorplans'],\n          i,\n          [id]\n        );\n      }\n      return { entityId, schema_name, contactId };\n    }\n    let parseEmail = contact.data;\n    let contactId = parseEmail['entries'][0]['id'];\n\n    // lets test the schemanale\n    let schema_name;\n    if (data.listingType === 'For Rent') {\n      if (data.buildingType === 'Flat') {\n        schema_name = 'flat_rent';\n      }\n      if (data.buildingType === 'House') {\n        schema_name = 'houses_rent';\n      }\n      if (data.buildingType === 'Investment') {\n        schema_name = 'investment';\n      }\n      if (data.buildingType === 'Land') {\n        schema_name = 'land_lease';\n      }\n      if (data.buildingType === 'Commercial') {\n        if (shops_commerce.includes(data.estatetype)) {\n          schema_name = 'shops_commerce_rent';\n        } else if (catering_accommodation.includes(data.estatetype)) {\n          schema_name = 'catering_accommodation_rent';\n        } else if (production_halls.includes(data.estatetype)) {\n          schema_name = 'production_halls_rent';\n        } else if (office_surgery.includes(data.estatetype)) {\n          schema_name = 'office_surgery_rent';\n        }\n      }\n    }\n    if (data.listingType === 'For Sale') {\n      if (data.buildingType === 'Flat') {\n        schema_name = 'flat_purchase';\n      }\n      if (data.buildingType === 'House') {\n        schema_name = 'house_purchase';\n      }\n      if (data.buildingType === 'Investment') {\n        schema_name = 'investment';\n      }\n      if (data.buildingType === 'Land') {\n        schema_name = 'land_purchase';\n      }\n      if (data.buildingType === 'Commercial') {\n        if (shops_commerce.includes(data.estatetype)) {\n          schema_name = 'shops_commerce_purchase';\n        } else if (catering_accommodation.includes(data.estatetype)) {\n          schema_name = 'catering_accommodation_purchase';\n        } else if (production_halls.includes(data.estatetype)) {\n          schema_name = 'production_halls_purchase';\n        } else if (office_surgery.includes(data.estatetype)) {\n          schema_name = 'office_surgery_purchase';\n        }\n      }\n    }\n    // buildFormData\n    const getFormData = formData(data, contactId, schema_name);\n    let entityId = window.localStorage.getItem('entityId');\n    if (!entityId) {\n      const createEntitie = await axios.post(\n        `https://api.production.cloudios.flowfact-prod.cloud/entity-service/latest/schemas/${schema_name}`,\n        getFormData,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            cognitoToken,\n          },\n        }\n      );\n      entityId = createEntitie.data;\n      window.localStorage.setItem('entityId', entityId);\n    }\n\n    for (let [i, pic] of imgMultiStepForm.selectedType.entries()) {\n      setProgressValue(0);\n\n      setCurrentImgForm('imgMultiStepForm');\n\n      setCurrentImgIdx(i);\n\n      // openSnackbar(\n      //   `Bild ${i + 1} von ${imgMultiStepForm.selectedType.length} hochgeladen`,\n      //   'success'\n      // );\n      let title = imgMultiStepForm.formValuesType[i].imgDetails;\n      let formdata = new FormData();\n      let resizedImage;\n      try {\n        // resizedImage = await fixImage(pic);\n        resizedImage = pic;\n      } catch (e) {\n        resizedImage = pic;\n      }\n\n      formdata.append('file', resizedImage);\n      let id;\n      try {\n        if (!imgMultiStepForm.showTypeId[i]) {\n          let img = await axios.post(\n            `https://api.production.cloudios.flowfact-prod.cloud/multimedia-service/items/schemas/${schema_name}/entities/${entityId}?title=${title}`,\n            formdata,\n            {\n              headers: {\n                cognitoToken,\n                'Content-Type': 'multipart/form-data',\n              },\n              onUploadProgress: (progressEvent) => {\n                const { loaded, total } = progressEvent;\n                let percent = Math.floor((loaded * 100) / total);\n                console.log(`${loaded}kb of ${total}kb | ${percent}%`);\n\n                if (true) {\n                  setProgressValue(percent);\n                  // this.setState({ uploadPercentage: percent })\n                }\n              },\n            }\n          );\n\n          imgMultiStepForm.showType[i] = img.data.multimediaItem.fileReference;\n\n          id = img.data.multimediaItem.id;\n          imgMultiStepForm.setShowTypeId((st) => [...st, id]);\n        } else {\n          id = imgMultiStepForm.showTypeId[i];\n        }\n      } catch (err) {\n        setProgressValue(100);\n        id = imgMultiStepForm.showTypeId[i];\n      }\n      if (i === 0) {\n        await assignMediaItems(\n          cognitoToken,\n          entityId,\n          schema_name,\n          'homepage',\n          ['main_image'],\n          i,\n          [id]\n        );\n        await assignMediaItems(\n          cognitoToken,\n          entityId,\n          schema_name,\n          'portal',\n          ['main_image'],\n          i,\n          [id]\n        );\n      } else {\n        await assignMediaItems(\n          cognitoToken,\n          entityId,\n          schema_name,\n          'homepage',\n          ['pictures'],\n          i,\n          [id]\n        );\n        await assignMediaItems(\n          cognitoToken,\n          entityId,\n          schema_name,\n          'portal',\n          ['pictures'],\n          i,\n          [id]\n        );\n      }\n      imgMultiStepForm.formValuesType[i].flowFactId = id;\n    }\n    for (let [i, pic] of planMultiStepForm.selectedType.entries()) {\n      setProgressValue(0);\n\n      setCurrentImgForm('planMultiStepForm');\n\n      setCurrentImgIdx(i);\n\n      // openSnackbar(\n      //   `Grundriss ${i + 1} von ${\n      //     planMultiStepForm.selectedType.length\n      //   } hochgeladen`,\n      //   'success'\n      // );\n      let title = planMultiStepForm.formValuesType[i].imgDetails;\n      let formdata = new FormData();\n\n      let resizedImage;\n      try {\n        // resizedImage = await fixImage(pic);\n        resizedImage = pic;\n      } catch (e) {\n        resizedImage = pic;\n      }\n\n      formdata.append('file', resizedImage);\n      let id;\n      try {\n        if (!imgMultiStepForm.showTypeId[i]) {\n          let img = await axios.post(\n            `https://api.production.cloudios.flowfact-prod.cloud/multimedia-service/items/schemas/${schema_name}/entities/${entityId}?title=${title}`,\n            formdata,\n            {\n              headers: {\n                cognitoToken,\n                'Content-Type': 'multipart/form-data',\n              },\n              onUploadProgress: (progressEvent) => {\n                const { loaded, total } = progressEvent;\n                let percent = Math.floor((loaded * 100) / total);\n                console.log(`${loaded}kb of ${total}kb | ${percent}%`);\n\n                if (true) {\n                  setProgressValue(percent);\n                  // this.setState({ uploadPercentage: percent })\n                }\n              },\n            }\n          );\n\n          planMultiStepForm.showType[i] = img.data.multimediaItem.fileReference;\n          id = img.data.multimediaItem.id;\n          planMultiStepForm.setShowTypeId((st) => [...st, id]);\n        } else {\n          id = imgMultiStepForm.showTypeId[i];\n        }\n      } catch (err) {\n        id = imgMultiStepForm.showTypeId[i];\n\n        setProgressValue(100);\n      }\n      await assignMediaItems(\n        cognitoToken,\n        entityId,\n        schema_name,\n        'homepage',\n        ['floorplans'],\n        i,\n        [id]\n      );\n      await assignMediaItems(\n        cognitoToken,\n        entityId,\n        schema_name,\n        'portal',\n        ['floorplans'],\n        i,\n        [id]\n      );\n      planMultiStepForm.formValuesType[i].flowFactId = id;\n    }\n    return {\n      entityId,\n      schema_name,\n      contactId,\n      imgMultiStepForm,\n      planMultiStepForm,\n    };\n  } catch (er) {\n    console.log(er);\n  }\n};\nconst publishToFlowFact = async (\n  data,\n  imgMultiStepForm,\n  planMultiStepForm,\n  openSnackbar,\n  t,\n  setLoadingTitle,\n  setCurrentImgIdx,\n  setCurrentImgForm,\n  setProgressValue\n) => {\n  // cognitoToken\n  try {\n    console.log('data', data);\n    const cognitoToken = await generateCognitoToken();\n    // test if we have contact\n    let contact = await axios.get(\n      `https://api.production.cloudios.flowfact-prod.cloud/contact-service/contact?email=${data.formEmail}`,\n      {\n        headers: {\n          cognitoToken,\n        },\n      }\n    );\n    let shops_commerce = [\n      '05A',\n      '05E1',\n      '05',\n      '05E2',\n      '05K',\n      '05L',\n      '05E',\n      '05LV',\n      '05F',\n    ];\n    let catering_accommodation = [\n      '08B',\n      '08C',\n      '08D',\n      '08F',\n      '08GAHS',\n      '08GAE',\n      '08HOT',\n      '08PENS',\n      '08REST',\n    ];\n    let production_halls = ['07H', '07LKÜ', '07L', '07LH', '07HI', '07W'];\n    let office_surgery = [\n      '06A',\n      '06BUGE',\n      '06BE',\n      '06B',\n      '06',\n      '06G',\n      '06P',\n      '06WOGE',\n    ];\n\n    if (contact.data === '') {\n      const newData = {\n        firstName: data.nameHide ? 'Privater' : data.contactName,\n        lastName: data.nameHide ? 'Anbieter' : data.lastName,\n        emails: [data.formEmail],\n        company: '321maklerfrei',\n        homepage: ['https://321maklerfrei.de'],\n      };\n      let phone = data.phoneNumber || data.phone;\n      if (phone?.length > 5) {\n        Object.assign(newData, {\n          phones: [\n            {\n              type: 'office',\n              number: formatPhoneNumberIntl(phone),\n            },\n          ],\n        });\n      } else {\n        Object.assign(newData, { phones: null });\n      }\n      const createFlowfactContact = JSON.stringify(newData);\n      // lets create the contact\n      let contactId = await axios.post(\n        `https://api.production.cloudios.flowfact-prod.cloud/contact-service/contact`,\n        createFlowfactContact,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n            cognitoToken,\n          },\n        }\n      );\n      contactId = contactId.data;\n      const getFormData = formData(data, contactId);\n      // lets test the schemanale\n      let schema_name;\n      if (data.listingType === 'For Rent') {\n        if (data.buildingType === 'Flat') {\n          schema_name = 'flat_rent';\n        }\n        if (data.buildingType === 'House') {\n          schema_name = 'house_rent';\n        }\n        if (data.buildingType === 'Investment') {\n          schema_name = 'investment';\n        }\n        if (data.buildingType === 'Land') {\n          schema_name = 'land_lease';\n        }\n        if (data.buildingType === 'Commercial') {\n          if (shops_commerce.includes(data.estatetype)) {\n            schema_name = 'shops_commerce_rent';\n          } else if (catering_accommodation.includes(data.estatetype)) {\n            schema_name = 'catering_accommodation_rent';\n          } else if (production_halls.includes(data.estatetype)) {\n            schema_name = 'production_halls_rent';\n          } else if (office_surgery.includes(data.estatetype)) {\n            schema_name = 'office_surgery_rent';\n          }\n        }\n      }\n      if (data.listingType === 'For Sale') {\n        if (data.buildingType === 'Flat') {\n          schema_name = 'flat_purchase';\n        }\n        if (data.buildingType === 'House') {\n          schema_name = 'house_purchase';\n        }\n        if (data.buildingType === 'Investment') {\n          schema_name = 'investment';\n        }\n        if (data.buildingType === 'Land') {\n          schema_name = 'land_purchase';\n        }\n        if (data.buildingType === 'Commercial') {\n          if (shops_commerce.includes(data.estatetype)) {\n            schema_name = 'shops_commerce_purchase';\n          } else if (catering_accommodation.includes(data.estatetype)) {\n            schema_name = 'catering_accommodation_purchase';\n          } else if (production_halls.includes(data.estatetype)) {\n            schema_name = 'production_halls_purchase';\n          } else if (office_surgery.includes(data.estatetype)) {\n            schema_name = 'office_surgery_purchase';\n          }\n        }\n      }\n      let entityId = window.localStorage.getItem('entityId');\n      if (!entityId) {\n        const createEntitie = await axios.post(\n          `https://api.production.cloudios.flowfact-prod.cloud/entity-service/latest/schemas/${schema_name}`,\n          getFormData,\n          {\n            headers: {\n              'Content-Type': 'application/json',\n              cognitoToken,\n            },\n          }\n        );\n        entityId = createEntitie.data;\n        window.localStorage.setItem('entityId', entityId);\n      }\n      for (let [i, pic] of imgMultiStepForm.selectedType.entries()) {\n        setProgressValue(0);\n        console.log('i', i);\n        setCurrentImgForm('imgMultiStepForm');\n        setCurrentImgIdx(i);\n        openSnackbar(\n          `Bild ${i + 1} von ${\n            imgMultiStepForm.selectedType.length\n          } hochgeladen`,\n          'success'\n        );\n        let title = imgMultiStepForm.formValuesType[i].imgDetails;\n        let formdata = new FormData();\n\n        let resizedImage;\n        try {\n          // resizedImage = await fixImage(pic);\n          resizedImage = pic;\n        } catch (e) {\n          resizedImage = pic;\n        }\n\n        formdata.append('file', resizedImage);\n        let img = await axios.post(\n          `https://api.production.cloudios.flowfact-prod.cloud/multimedia-service/items/schemas/${schema_name}/entities/${entityId}?title=${title}`,\n          formdata,\n          {\n            headers: {\n              cognitoToken,\n              'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress: (progressEvent) => {\n              const { loaded, total } = progressEvent;\n              let percent = Math.floor((loaded * 100) / total);\n              console.log(`${loaded}kb of ${total}kb | ${percent}%`);\n\n              if (true) {\n                setProgressValue(percent);\n                // this.setState({ uploadPercentage: percent })\n              }\n            },\n          }\n        );\n        let id = img.data.multimediaItem.id;\n        if (i === 0) {\n          await assignMediaItems(\n            cognitoToken,\n            entityId,\n            schema_name,\n            'homepage',\n            ['main_image'],\n            i,\n            [id]\n          );\n          await assignMediaItems(\n            cognitoToken,\n            entityId,\n            schema_name,\n            'portal',\n            ['main_image'],\n            i,\n            [id]\n          );\n        } else {\n          await assignMediaItems(\n            cognitoToken,\n            entityId,\n            schema_name,\n            'homepage',\n            ['pictures'],\n            i,\n            [id]\n          );\n          await assignMediaItems(\n            cognitoToken,\n            entityId,\n            schema_name,\n            'portal',\n            ['pictures'],\n            i,\n            [id]\n          );\n        }\n      }\n      for (let [i, pic] of planMultiStepForm.selectedType.entries()) {\n        setProgressValue(0);\n\n        setCurrentImgForm('planMultiStepForm');\n\n        setCurrentImgIdx(i);\n\n        openSnackbar(\n          `Grundriss ${i + 1} von ${\n            planMultiStepForm.selectedType.length\n          } hochgeladen`,\n          'success'\n        );\n        let title = planMultiStepForm.formValuesType[i].imgDetails;\n        let formdata = new FormData();\n        let resizedImage;\n        try {\n          // resizedImage = await fixImage(pic);\n          resizedImage = pic;\n        } catch (e) {\n          resizedImage = pic;\n        }\n\n        formdata.append('file', resizedImage);\n        let img = await axios.post(\n          `https://api.production.cloudios.flowfact-prod.cloud/multimedia-service/items/schemas/${schema_name}/entities/${entityId}?title=${title}`,\n          formdata,\n          {\n            headers: {\n              cognitoToken,\n              'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress: (progressEvent) => {\n              const { loaded, total } = progressEvent;\n              let percent = Math.floor((loaded * 100) / total);\n              console.log(`${loaded}kb of ${total}kb | ${percent}%`);\n\n              if (true) {\n                setProgressValue(percent);\n                // this.setState({ uploadPercentage: percent })\n              }\n            },\n          }\n        );\n        let id = img.data.multimediaItem.id;\n        await assignMediaItems(\n          cognitoToken,\n          entityId,\n          schema_name,\n          'homepage',\n          ['floorplans'],\n          i,\n          [id]\n        );\n        await assignMediaItems(\n          cognitoToken,\n          entityId,\n          schema_name,\n          'portal',\n          ['floorplans'],\n          i,\n          [id]\n        );\n      }\n      return { entityId, schema_name, contactId };\n    }\n    let parseEmail = contact.data;\n    let contactId = parseEmail['entries'][0]['id'];\n\n    // lets test the schemanale\n    let schema_name;\n    if (data.listingType === 'For Rent') {\n      if (data.buildingType === 'Flat') {\n        schema_name = 'flat_rent';\n      }\n      if (data.buildingType === 'House') {\n        schema_name = 'houses_rent';\n      }\n      if (data.buildingType === 'Investment') {\n        schema_name = 'investment';\n      }\n      if (data.buildingType === 'Land') {\n        schema_name = 'land_lease';\n      }\n      if (data.buildingType === 'Commercial') {\n        if (shops_commerce.includes(data.estatetype)) {\n          schema_name = 'shops_commerce_rent';\n        } else if (catering_accommodation.includes(data.estatetype)) {\n          schema_name = 'catering_accommodation_rent';\n        } else if (production_halls.includes(data.estatetype)) {\n          schema_name = 'production_halls_rent';\n        } else if (office_surgery.includes(data.estatetype)) {\n          schema_name = 'office_surgery_rent';\n        }\n      }\n    }\n    if (data.listingType === 'For Sale') {\n      if (data.buildingType === 'Flat') {\n        schema_name = 'flat_purchase';\n      }\n      if (data.buildingType === 'House') {\n        schema_name = 'house_purchase';\n      }\n      if (data.buildingType === 'Investment') {\n        schema_name = 'investment';\n      }\n      if (data.buildingType === 'Land') {\n        schema_name = 'land_purchase';\n      }\n      if (data.buildingType === 'Commercial') {\n        if (shops_commerce.includes(data.estatetype)) {\n          schema_name = 'shops_commerce_purchase';\n        } else if (catering_accommodation.includes(data.estatetype)) {\n          schema_name = 'catering_accommodation_purchase';\n        } else if (production_halls.includes(data.estatetype)) {\n          schema_name = 'production_halls_purchase';\n        } else if (office_surgery.includes(data.estatetype)) {\n          schema_name = 'office_surgery_purchase';\n        }\n      }\n    }\n    // buildFormData\n    const getFormData = formData(data, contactId, schema_name);\n    let entityId = window.localStorage.getItem('entityId');\n    if (!entityId) {\n      const createEntitie = await axios.post(\n        `https://api.production.cloudios.flowfact-prod.cloud/entity-service/latest/schemas/${schema_name}`,\n        getFormData,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            cognitoToken,\n          },\n        }\n      );\n\n      entityId = createEntitie.data;\n      window.localStorage.setItem('entityId', entityId);\n    }\n    for (let [i, pic] of imgMultiStepForm.selectedType.entries()) {\n      setProgressValue(0);\n\n      setCurrentImgForm('imgMultiStepForm');\n\n      setCurrentImgIdx(i);\n\n      openSnackbar(\n        `Bild ${i + 1} von ${imgMultiStepForm.selectedType.length} hochgeladen`,\n        'success'\n      );\n      let title = imgMultiStepForm.formValuesType[i].imgDetails;\n      let formdata = new FormData();\n      let resizedImage;\n      try {\n        // resizedImage = await fixImage(pic);\n        resizedImage = pic;\n      } catch (e) {\n        resizedImage = pic;\n      }\n\n      formdata.append('file', resizedImage);\n      let img = await axios.post(\n        `https://api.production.cloudios.flowfact-prod.cloud/multimedia-service/items/schemas/${schema_name}/entities/${entityId}?title=${title}`,\n        formdata,\n        {\n          headers: {\n            cognitoToken,\n            'Content-Type': 'multipart/form-data',\n          },\n          onUploadProgress: (progressEvent) => {\n            const { loaded, total } = progressEvent;\n            let percent = Math.floor((loaded * 100) / total);\n            console.log(`${loaded}kb of ${total}kb | ${percent}%`);\n\n            if (true) {\n              setProgressValue(percent);\n              // this.setState({ uploadPercentage: percent })\n            }\n          },\n        }\n      );\n      let id = img.data.multimediaItem.id;\n      if (i === 0) {\n        await assignMediaItems(\n          cognitoToken,\n          entityId,\n          schema_name,\n          'homepage',\n          ['main_image'],\n          i,\n          [id]\n        );\n        await assignMediaItems(\n          cognitoToken,\n          entityId,\n          schema_name,\n          'portal',\n          ['main_image'],\n          i,\n          [id]\n        );\n      } else {\n        await assignMediaItems(\n          cognitoToken,\n          entityId,\n          schema_name,\n          'homepage',\n          ['pictures'],\n          i,\n          [id]\n        );\n        await assignMediaItems(\n          cognitoToken,\n          entityId,\n          schema_name,\n          'portal',\n          ['pictures'],\n          i,\n          [id]\n        );\n      }\n      imgMultiStepForm.formValuesType[i].flowFactId = id;\n    }\n    for (let [i, pic] of planMultiStepForm.selectedType.entries()) {\n      setProgressValue(0);\n\n      setCurrentImgForm('planMultiStepForm');\n\n      setCurrentImgIdx(i);\n\n      openSnackbar(\n        `Grundriss ${i + 1} von ${\n          planMultiStepForm.selectedType.length\n        } hochgeladen`,\n        'success'\n      );\n      let title = planMultiStepForm.formValuesType[i].imgDetails;\n      let formdata = new FormData();\n\n      let resizedImage;\n      try {\n        // resizedImage = await fixImage(pic);\n        resizedImage = pic;\n      } catch (e) {\n        resizedImage = pic;\n      }\n\n      formdata.append('file', resizedImage);\n      let img = await axios.post(\n        `https://api.production.cloudios.flowfact-prod.cloud/multimedia-service/items/schemas/${schema_name}/entities/${entityId}?title=${title}`,\n        formdata,\n        {\n          headers: {\n            cognitoToken,\n            'Content-Type': 'multipart/form-data',\n          },\n          onUploadProgress: (progressEvent) => {\n            const { loaded, total } = progressEvent;\n            let percent = Math.floor((loaded * 100) / total);\n            console.log(`${loaded}kb of ${total}kb | ${percent}%`);\n\n            if (true) {\n              setProgressValue(percent);\n              // this.setState({ uploadPercentage: percent })\n            }\n          },\n        }\n      );\n      let id = img.data.multimediaItem.id;\n      await assignMediaItems(\n        cognitoToken,\n        entityId,\n        schema_name,\n        'homepage',\n        ['floorplans'],\n        i,\n        [id]\n      );\n      await assignMediaItems(\n        cognitoToken,\n        entityId,\n        schema_name,\n        'portal',\n        ['floorplans'],\n        i,\n        [id]\n      );\n      planMultiStepForm.formValuesType[i].flowFactId = id;\n    }\n    return {\n      entityId,\n      schema_name,\n      contactId,\n      imgMultiStepForm,\n      planMultiStepForm,\n    };\n  } catch (er) {\n    console.log(er);\n  }\n};\n\nconst updateFlowFactListDetails = async (\n  data,\n  imgMultiStepForm,\n  planMultiStepForm,\n  uploadImages,\n  openSnackbar,\n  t\n) => {\n  // cognitoToken\n  try {\n    const cognitoToken = await generateCognitoToken();\n    if (uploadImages) {\n      for (let [i, pic] of imgMultiStepForm.selectedType.entries()) {\n        openSnackbar(\n          `Bild ${i + 1} von ${\n            imgMultiStepForm.selectedType.length\n          } hochgeladen`,\n          'success'\n        );\n        let title = imgMultiStepForm.formValuesType[i].imgDetails;\n        let formdata = new FormData();\n        let resizedImage;\n        try {\n          // resizedImage = await fixImage(pic);\n          resizedImage = pic;\n        } catch (e) {\n          resizedImage = pic;\n        }\n\n        formdata.append('file', resizedImage);\n        let img = await axios.post(\n          `https://api.production.cloudios.flowfact-prod.cloud/multimedia-service/items/schemas/${data.schema_name}/entities/${data.entityId}?title=${title}`,\n          formdata,\n          {\n            headers: {\n              cognitoToken,\n              'Content-Type': 'multipart/form-data',\n            },\n          }\n        );\n        let id = img.data.multimediaItem.id;\n        if (i === 0) {\n          await assignMediaItems(\n            cognitoToken,\n            data.entityId,\n            data.schema_name,\n            'homepage',\n            ['main_image'],\n            i,\n            [id]\n          );\n          await assignMediaItems(\n            cognitoToken,\n            data.entityId,\n            data.schema_name,\n            'portal',\n            ['main_image'],\n            i,\n            [id]\n          );\n        } else {\n          await assignMediaItems(\n            cognitoToken,\n            data.entityId,\n            data.schema_name,\n            'homepage',\n            ['pictures'],\n            i,\n            [id]\n          );\n          await assignMediaItems(\n            cognitoToken,\n            data.entityId,\n            data.schema_name,\n            'portal',\n            ['pictures'],\n            i,\n            [id]\n          );\n        }\n        imgMultiStepForm.formValuesType[i].flowFactId = id;\n      }\n      for (let [i, pic] of planMultiStepForm.selectedType.entries()) {\n        openSnackbar(\n          `Grundriss ${i + 1} von ${\n            planMultiStepForm.selectedType.length\n          } hochgeladen`,\n          'success'\n        );\n        let title = planMultiStepForm.formValuesType[i].imgDetails;\n        let formdata = new FormData();\n        let resizedImage;\n        try {\n          // resizedImage = await fixImage(pic);\n          resizedImage = pic;\n        } catch (e) {\n          resizedImage = pic;\n        }\n\n        formdata.append('file', resizedImage);\n        let img = await axios.post(\n          `https://api.production.cloudios.flowfact-prod.cloud/multimedia-service/items/schemas/${data.schema_name}/entities/${data.entityId}?title=${title}`,\n          formdata,\n          {\n            headers: {\n              cognitoToken,\n              'Content-Type': 'multipart/form-data',\n            },\n          }\n        );\n        let id = img.data.multimediaItem.id;\n        await assignMediaItems(\n          cognitoToken,\n          data.entityId,\n          data.schema_name,\n          'homepage',\n          ['floorplans'],\n          i,\n          [id]\n        );\n        await assignMediaItems(\n          cognitoToken,\n          data.entityId,\n          data.schema_name,\n          'portal',\n          ['floorplans'],\n          i,\n          [id]\n        );\n        planMultiStepForm.formValuesType[i].flowFactId = id;\n      }\n      return { imgMultiStepForm, planMultiStepForm };\n    }\n    // buildFormData\n    const getFormData = formData(data, data.flowfactContactId);\n\n    const updateEntitie = await axios.put(\n      `https://api.production.cloudios.flowfact-prod.cloud/entity-service/schemas/${data.schema_name}/entities/${data.entityId}`,\n      getFormData,\n      {\n        headers: {\n          'Content-Type': 'application/json',\n          cognitoToken,\n        },\n      }\n    );\n    return updateEntitie.data;\n  } catch (er) {\n    console.log(er);\n  }\n};\n\nconst updateFlowFactContact = async (data) => {\n  // cognitoToken\n\n  try {\n    const cognitoToken = await generateCognitoToken();\n    const newData = {\n      firstName: data.nameHide ? 'Privater' : data.contactName,\n      lastName: data.nameHide ? 'Anbieter' : data.lastName,\n      emails: [data.formEmail],\n      company: '321maklerfrei',\n      homepage: ['https://321maklerfrei.de'],\n    };\n    if (data.phoneNumber?.length > 5) {\n      Object.assign(newData, {\n        phones: [\n          {\n            type: 'office',\n            number: formatPhoneNumberIntl(data.phoneNumber),\n          },\n        ],\n      });\n    } else {\n      Object.assign(newData, { phones: null });\n    }\n    const updatesData = JSON.stringify(newData);\n    const updateEntitie = await axios.put(\n      `https://api.production.cloudios.flowfact-prod.cloud/contact-service/contact/${data.flowfactContactId}`,\n      updatesData,\n      {\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          cognitoToken,\n        },\n      }\n    );\n    return updateEntitie.data;\n  } catch (er) {\n    console.log(er);\n  }\n};\n\nexport const flowFactService = {\n  publishToFlowFact,\n  generateCognitoToken,\n  updateFlowFactContact,\n  updateFlowFactListDetails,\n  publishImagesToFlowFact,\n};\n","import axios from \"axios\";\r\nimport { config } from \"../assets/config/config\";\r\n\r\nconst apiUrl = config.api.url;\r\n\r\nconst updatePaymentMethod = (paymentMethodId, address, uniqId, sepa) => {\r\n  return axios\r\n    .post(`${apiUrl}/v1/stripe/updatePaymentMethod`, {\r\n      paymentMethodId,\r\n      address,\r\n      uniqId,\r\n      sepa\r\n    })\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error) => console.log(error));\r\n};\r\n\r\nconst createSubscription = (subscriptionType, uniqId, stripeId) => {\r\n  return axios\r\n    .post(`${apiUrl}/v1/stripe/create-subscription`, {\r\n      subscriptionType: subscriptionType,\r\n      uniqId: uniqId,\r\n      // subscriptionID: subscriptionID,\r\n      stripeId: stripeId,\r\n    })\r\n    .then((response) => {\r\n      return response.data.subscription;\r\n    });\r\n};\r\nconst getSepaClientSecret = (email) => {\r\n  return axios\r\n    .post(`${apiUrl}/v1/stripe/fresh-sepa-client-secret`, {\r\n      email\r\n    })\r\n    .then((response) => {\r\n      return response.data.freshSepaClientSecret;\r\n    });\r\n};\r\n\r\nconst createPaypalSubscription = (subscriptionType, uniqId, subscriptionID) => {\r\n  return axios\r\n    .post(`${apiUrl}/v1/stripe/create-paypal-subscription`, {\r\n      subscriptionType,\r\n      uniqId,\r\n      subscriptionID\r\n    })\r\n    .then((response) => {\r\n      return response.data.subscription;\r\n    });\r\n};\r\n\r\nconst completeSubscription = (subscriptionId, productId, uniqId) => {\r\n  return axios\r\n    .post(`${apiUrl}/v1/stripe/complete-subscription`, {\r\n      subscriptionId: subscriptionId,\r\n      productId: productId,\r\n      uniqId: uniqId,\r\n    })\r\n    .then((response) => {\r\n      return response.data.user;\r\n    });\r\n};\r\n\r\n//pause subs\r\nconst pauseSubscription = (uniqId) => {\r\n  return axios\r\n    .post(`${apiUrl}/v1/stripe/pause-subscription`, {\r\n      uniqId: uniqId,\r\n    })\r\n    .then((response) => {\r\n      return response.data.uniqId;\r\n    });\r\n};\r\n//cancel auto renew\r\nconst cancelAutoRenew = (uniqId) => {\r\n  return axios\r\n    .post(`${apiUrl}/v1/stripe/cancel-auto-renew`, {\r\n      uniqId: uniqId,\r\n    })\r\n    .then((response) => {\r\n      return response.data.uniqId;\r\n    });\r\n};\r\nconst unpauseSubscription = (uniqId) => {\r\n  return axios\r\n    .post(`${apiUrl}/v1/stripe/unpause-subscription`, {\r\n      uniqId: uniqId,\r\n    })\r\n    .then((response) => {\r\n      return response.data.uniqId;\r\n    });\r\n};\r\n\r\nconst deleteSubscription = (subscriptionId) => {\r\n  return axios\r\n    .post(`${apiUrl}/v1/stripe/delete-subscription`, {\r\n      subscriptionId: subscriptionId,\r\n    })\r\n    .catch((err) => {});\r\n};\r\n// Create a Payment Intent (returns the client with a temporary secret)\r\nconst createPaymentIntent = async (id) => {\r\n  return axios\r\n    .post(`${apiUrl}/v1/stripe/create-payment-intent`, {\r\n      id\r\n    })\r\n    .catch((err) => {\r\n      console.log(err.message);\r\n    });\r\n};\r\nconst sendEmailToDom = async (uniqId, type) => {\r\n  return axios\r\n    .post(`${apiUrl}/v1/stripe/send-email-to-dom`, {\r\n      uniqId, type\r\n    })\r\n    .catch((err) => {\r\n      console.log(err.message);\r\n    });\r\n};\r\n\r\nexport const stripeService = {\r\n  updatePaymentMethod,\r\n  createSubscription,\r\n  completeSubscription,\r\n  pauseSubscription,\r\n  deleteSubscription,\r\n  unpauseSubscription,\r\n  createPaypalSubscription,\r\n  cancelAutoRenew,\r\n  getSepaClientSecret,\r\n  sendEmailToDom,\r\n  createPaymentIntent\r\n};\r\n"],"sourceRoot":""}